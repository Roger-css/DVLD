// <auto-generated />
using System;
using DVLD.DataService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DVLD.DataService.Migrations
{
    [DbContext(typeof(DvldContext))]
    [Migration("20240405172252_blablabla")]
    partial class blablabla
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DVLD.Entities.DbSets.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationPersonId")
                        .HasColumnType("int");

                    b.Property<short>("ApplicationStatus")
                        .HasColumnType("smallint");

                    b.Property<int>("ApplicationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaidFees")
                        .HasColumnType("smallmoney");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationPersonId");

                    b.HasIndex("ApplicationTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.ApplicationType", b =>
                {
                    b.Property<int>("ApplicationTypeId")
                        .HasColumnType("int");

                    b.Property<float>("ApplicationTypeFees")
                        .HasColumnType("real");

                    b.Property<string>("ApplicationTypeTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationTypeId");

                    b.ToTable("ApplicationTypes");

                    b.HasData(
                        new
                        {
                            ApplicationTypeId = 1,
                            ApplicationTypeFees = 15f,
                            ApplicationTypeTitle = "New Local Driving License Service"
                        },
                        new
                        {
                            ApplicationTypeId = 2,
                            ApplicationTypeFees = 7f,
                            ApplicationTypeTitle = "Renew Driving License Service"
                        },
                        new
                        {
                            ApplicationTypeId = 3,
                            ApplicationTypeFees = 10f,
                            ApplicationTypeTitle = "Replacement for a Lost Driving License"
                        },
                        new
                        {
                            ApplicationTypeId = 4,
                            ApplicationTypeFees = 5f,
                            ApplicationTypeTitle = "Replacement for a Damaged Driving License"
                        },
                        new
                        {
                            ApplicationTypeId = 5,
                            ApplicationTypeFees = 15f,
                            ApplicationTypeTitle = "Release Detained Driving License"
                        },
                        new
                        {
                            ApplicationTypeId = 6,
                            ApplicationTypeFees = 51f,
                            ApplicationTypeTitle = "New International License"
                        },
                        new
                        {
                            ApplicationTypeId = 7,
                            ApplicationTypeFees = 5f,
                            ApplicationTypeTitle = "Retake Test"
                        });
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryName = "Afghanistan"
                        },
                        new
                        {
                            Id = 2,
                            CountryName = "Albania"
                        },
                        new
                        {
                            Id = 3,
                            CountryName = "Algeria"
                        },
                        new
                        {
                            Id = 4,
                            CountryName = "Andorra"
                        },
                        new
                        {
                            Id = 5,
                            CountryName = "Angola"
                        },
                        new
                        {
                            Id = 6,
                            CountryName = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 7,
                            CountryName = "Argentina"
                        },
                        new
                        {
                            Id = 8,
                            CountryName = "Armenia"
                        },
                        new
                        {
                            Id = 9,
                            CountryName = "Austria"
                        },
                        new
                        {
                            Id = 10,
                            CountryName = "Azerbaijan"
                        },
                        new
                        {
                            Id = 11,
                            CountryName = "Bahrain"
                        },
                        new
                        {
                            Id = 12,
                            CountryName = "Bangladesh"
                        },
                        new
                        {
                            Id = 13,
                            CountryName = "Barbados"
                        },
                        new
                        {
                            Id = 14,
                            CountryName = "Belarus"
                        },
                        new
                        {
                            Id = 15,
                            CountryName = "Belgium"
                        },
                        new
                        {
                            Id = 16,
                            CountryName = "Belize"
                        },
                        new
                        {
                            Id = 17,
                            CountryName = "Benin"
                        },
                        new
                        {
                            Id = 18,
                            CountryName = "Bhutan"
                        },
                        new
                        {
                            Id = 19,
                            CountryName = "Bolivia"
                        },
                        new
                        {
                            Id = 20,
                            CountryName = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 21,
                            CountryName = "Botswana"
                        },
                        new
                        {
                            Id = 22,
                            CountryName = "Brazil"
                        },
                        new
                        {
                            Id = 23,
                            CountryName = "Brunei"
                        },
                        new
                        {
                            Id = 24,
                            CountryName = "Bulgaria"
                        },
                        new
                        {
                            Id = 25,
                            CountryName = "Burkina Faso"
                        },
                        new
                        {
                            Id = 26,
                            CountryName = "Burundi"
                        },
                        new
                        {
                            Id = 27,
                            CountryName = "Cabo Verde"
                        },
                        new
                        {
                            Id = 28,
                            CountryName = "Cambodia"
                        },
                        new
                        {
                            Id = 29,
                            CountryName = "Cameroon"
                        },
                        new
                        {
                            Id = 30,
                            CountryName = "Canada"
                        },
                        new
                        {
                            Id = 31,
                            CountryName = "Central African Republic"
                        },
                        new
                        {
                            Id = 32,
                            CountryName = "Chad"
                        },
                        new
                        {
                            Id = 33,
                            CountryName = "Channel Islands"
                        },
                        new
                        {
                            Id = 34,
                            CountryName = "Chile"
                        },
                        new
                        {
                            Id = 35,
                            CountryName = "China"
                        },
                        new
                        {
                            Id = 36,
                            CountryName = "Colombia"
                        },
                        new
                        {
                            Id = 37,
                            CountryName = "Comoros"
                        },
                        new
                        {
                            Id = 38,
                            CountryName = "Congo"
                        },
                        new
                        {
                            Id = 39,
                            CountryName = "Costa Rica"
                        },
                        new
                        {
                            Id = 40,
                            CountryName = "Côte d'Ivoire"
                        },
                        new
                        {
                            Id = 41,
                            CountryName = "Croatia"
                        },
                        new
                        {
                            Id = 42,
                            CountryName = "Cuba"
                        },
                        new
                        {
                            Id = 43,
                            CountryName = "Cyprus"
                        },
                        new
                        {
                            Id = 44,
                            CountryName = "Czech Republic"
                        },
                        new
                        {
                            Id = 45,
                            CountryName = "Denmark"
                        },
                        new
                        {
                            Id = 46,
                            CountryName = "Djibouti"
                        },
                        new
                        {
                            Id = 47,
                            CountryName = "Dominica"
                        },
                        new
                        {
                            Id = 48,
                            CountryName = "Dominican Republic"
                        },
                        new
                        {
                            Id = 49,
                            CountryName = "DR Congo"
                        },
                        new
                        {
                            Id = 50,
                            CountryName = "Ecuador"
                        },
                        new
                        {
                            Id = 51,
                            CountryName = "Egypt"
                        },
                        new
                        {
                            Id = 52,
                            CountryName = "El Salvador"
                        },
                        new
                        {
                            Id = 53,
                            CountryName = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 54,
                            CountryName = "Eritrea"
                        },
                        new
                        {
                            Id = 55,
                            CountryName = "Estonia"
                        },
                        new
                        {
                            Id = 56,
                            CountryName = "Eswatini"
                        },
                        new
                        {
                            Id = 57,
                            CountryName = "Ethiopia"
                        },
                        new
                        {
                            Id = 58,
                            CountryName = "Faeroe Islands"
                        },
                        new
                        {
                            Id = 59,
                            CountryName = "Finland"
                        },
                        new
                        {
                            Id = 60,
                            CountryName = "France"
                        },
                        new
                        {
                            Id = 61,
                            CountryName = "French Guiana"
                        },
                        new
                        {
                            Id = 62,
                            CountryName = "Gabon"
                        },
                        new
                        {
                            Id = 63,
                            CountryName = "Gambia"
                        },
                        new
                        {
                            Id = 64,
                            CountryName = "Georgia"
                        },
                        new
                        {
                            Id = 65,
                            CountryName = "Germany"
                        },
                        new
                        {
                            Id = 66,
                            CountryName = "Ghana"
                        },
                        new
                        {
                            Id = 67,
                            CountryName = "Gibraltar"
                        },
                        new
                        {
                            Id = 68,
                            CountryName = "Greece"
                        },
                        new
                        {
                            Id = 69,
                            CountryName = "Grenada"
                        },
                        new
                        {
                            Id = 70,
                            CountryName = "Guatemala"
                        },
                        new
                        {
                            Id = 71,
                            CountryName = "Guinea"
                        },
                        new
                        {
                            Id = 72,
                            CountryName = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = 73,
                            CountryName = "Guyana"
                        },
                        new
                        {
                            Id = 74,
                            CountryName = "Haiti"
                        },
                        new
                        {
                            Id = 75,
                            CountryName = "Holy See"
                        },
                        new
                        {
                            Id = 76,
                            CountryName = "Honduras"
                        },
                        new
                        {
                            Id = 77,
                            CountryName = "Hong Kong"
                        },
                        new
                        {
                            Id = 78,
                            CountryName = "Hungary"
                        },
                        new
                        {
                            Id = 79,
                            CountryName = "Iceland"
                        },
                        new
                        {
                            Id = 80,
                            CountryName = "India"
                        },
                        new
                        {
                            Id = 81,
                            CountryName = "Indonesia"
                        },
                        new
                        {
                            Id = 82,
                            CountryName = "Iran"
                        },
                        new
                        {
                            Id = 83,
                            CountryName = "Iraq"
                        },
                        new
                        {
                            Id = 84,
                            CountryName = "Ireland"
                        },
                        new
                        {
                            Id = 85,
                            CountryName = "Isle of Man"
                        },
                        new
                        {
                            Id = 86,
                            CountryName = "Israel"
                        },
                        new
                        {
                            Id = 87,
                            CountryName = "Italy"
                        },
                        new
                        {
                            Id = 88,
                            CountryName = "Jamaica"
                        },
                        new
                        {
                            Id = 89,
                            CountryName = "Japan"
                        },
                        new
                        {
                            Id = 90,
                            CountryName = "Jordan"
                        },
                        new
                        {
                            Id = 91,
                            CountryName = "Kazakhstan"
                        },
                        new
                        {
                            Id = 92,
                            CountryName = "Kenya"
                        },
                        new
                        {
                            Id = 93,
                            CountryName = "Kuwait"
                        },
                        new
                        {
                            Id = 94,
                            CountryName = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = 95,
                            CountryName = "Laos"
                        },
                        new
                        {
                            Id = 96,
                            CountryName = "Latvia"
                        },
                        new
                        {
                            Id = 97,
                            CountryName = "Lebanon"
                        },
                        new
                        {
                            Id = 98,
                            CountryName = "Lesotho"
                        },
                        new
                        {
                            Id = 99,
                            CountryName = "Liberia"
                        },
                        new
                        {
                            Id = 100,
                            CountryName = "Libya"
                        },
                        new
                        {
                            Id = 101,
                            CountryName = "Liechtenstein"
                        },
                        new
                        {
                            Id = 102,
                            CountryName = "Lithuania"
                        },
                        new
                        {
                            Id = 103,
                            CountryName = "Luxembourg"
                        },
                        new
                        {
                            Id = 104,
                            CountryName = "Macao"
                        },
                        new
                        {
                            Id = 105,
                            CountryName = "Madagascar"
                        },
                        new
                        {
                            Id = 106,
                            CountryName = "Malawi"
                        },
                        new
                        {
                            Id = 107,
                            CountryName = "Malaysia"
                        },
                        new
                        {
                            Id = 108,
                            CountryName = "Maldives"
                        },
                        new
                        {
                            Id = 109,
                            CountryName = "Mali"
                        },
                        new
                        {
                            Id = 110,
                            CountryName = "Malta"
                        },
                        new
                        {
                            Id = 111,
                            CountryName = "Mauritania"
                        },
                        new
                        {
                            Id = 112,
                            CountryName = "Mauritius"
                        },
                        new
                        {
                            Id = 113,
                            CountryName = "Mayotte"
                        },
                        new
                        {
                            Id = 114,
                            CountryName = "Mexico"
                        },
                        new
                        {
                            Id = 115,
                            CountryName = "Moldova"
                        },
                        new
                        {
                            Id = 116,
                            CountryName = "Monaco"
                        },
                        new
                        {
                            Id = 117,
                            CountryName = "Mongolia"
                        },
                        new
                        {
                            Id = 118,
                            CountryName = "Montenegro"
                        },
                        new
                        {
                            Id = 119,
                            CountryName = "Morocco"
                        },
                        new
                        {
                            Id = 120,
                            CountryName = "Mozambique"
                        },
                        new
                        {
                            Id = 121,
                            CountryName = "Myanmar"
                        },
                        new
                        {
                            Id = 122,
                            CountryName = "Namibia"
                        },
                        new
                        {
                            Id = 123,
                            CountryName = "Nepal"
                        },
                        new
                        {
                            Id = 124,
                            CountryName = "Netherlands"
                        },
                        new
                        {
                            Id = 125,
                            CountryName = "Nicaragua"
                        },
                        new
                        {
                            Id = 126,
                            CountryName = "Niger"
                        },
                        new
                        {
                            Id = 127,
                            CountryName = "Nigeria"
                        },
                        new
                        {
                            Id = 128,
                            CountryName = "North Korea"
                        },
                        new
                        {
                            Id = 129,
                            CountryName = "North Macedonia"
                        },
                        new
                        {
                            Id = 130,
                            CountryName = "Norway"
                        },
                        new
                        {
                            Id = 131,
                            CountryName = "Oman"
                        },
                        new
                        {
                            Id = 132,
                            CountryName = "Pakistan"
                        },
                        new
                        {
                            Id = 133,
                            CountryName = "Panama"
                        },
                        new
                        {
                            Id = 134,
                            CountryName = "Paraguay"
                        },
                        new
                        {
                            Id = 135,
                            CountryName = "Peru"
                        },
                        new
                        {
                            Id = 136,
                            CountryName = "Philippines"
                        },
                        new
                        {
                            Id = 137,
                            CountryName = "Poland"
                        },
                        new
                        {
                            Id = 138,
                            CountryName = "Portugal"
                        },
                        new
                        {
                            Id = 139,
                            CountryName = "Qatar"
                        },
                        new
                        {
                            Id = 140,
                            CountryName = "Réunion"
                        },
                        new
                        {
                            Id = 141,
                            CountryName = "Romania"
                        },
                        new
                        {
                            Id = 142,
                            CountryName = "Russia"
                        },
                        new
                        {
                            Id = 143,
                            CountryName = "Rwanda"
                        },
                        new
                        {
                            Id = 144,
                            CountryName = "Saint Helena"
                        },
                        new
                        {
                            Id = 145,
                            CountryName = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = 146,
                            CountryName = "Saint Lucia"
                        },
                        new
                        {
                            Id = 147,
                            CountryName = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Id = 148,
                            CountryName = "San Marino"
                        },
                        new
                        {
                            Id = 149,
                            CountryName = "Sao Tome & Principe"
                        },
                        new
                        {
                            Id = 150,
                            CountryName = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 151,
                            CountryName = "Senegal"
                        },
                        new
                        {
                            Id = 152,
                            CountryName = "Serbia"
                        },
                        new
                        {
                            Id = 153,
                            CountryName = "Seychelles"
                        },
                        new
                        {
                            Id = 154,
                            CountryName = "Sierra Leone"
                        },
                        new
                        {
                            Id = 155,
                            CountryName = "Singapore"
                        },
                        new
                        {
                            Id = 156,
                            CountryName = "Slovakia"
                        },
                        new
                        {
                            Id = 157,
                            CountryName = "Slovenia"
                        },
                        new
                        {
                            Id = 158,
                            CountryName = "Somalia"
                        },
                        new
                        {
                            Id = 159,
                            CountryName = "South Africa"
                        },
                        new
                        {
                            Id = 160,
                            CountryName = "South Korea"
                        },
                        new
                        {
                            Id = 161,
                            CountryName = "South Sudan"
                        },
                        new
                        {
                            Id = 162,
                            CountryName = "Spain"
                        },
                        new
                        {
                            Id = 163,
                            CountryName = "Sri Lanka"
                        },
                        new
                        {
                            Id = 164,
                            CountryName = "State of Palestine"
                        },
                        new
                        {
                            Id = 165,
                            CountryName = "Sudan"
                        },
                        new
                        {
                            Id = 166,
                            CountryName = "Suriname"
                        },
                        new
                        {
                            Id = 167,
                            CountryName = "Sweden"
                        },
                        new
                        {
                            Id = 168,
                            CountryName = "Switzerland"
                        },
                        new
                        {
                            Id = 169,
                            CountryName = "Syria"
                        },
                        new
                        {
                            Id = 170,
                            CountryName = "Taiwan"
                        },
                        new
                        {
                            Id = 171,
                            CountryName = "Tajikistan"
                        },
                        new
                        {
                            Id = 172,
                            CountryName = "Tanzania"
                        },
                        new
                        {
                            Id = 173,
                            CountryName = "Thailand"
                        },
                        new
                        {
                            Id = 174,
                            CountryName = "The Bahamas"
                        },
                        new
                        {
                            Id = 175,
                            CountryName = "Timor-Leste"
                        },
                        new
                        {
                            Id = 176,
                            CountryName = "Togo"
                        },
                        new
                        {
                            Id = 177,
                            CountryName = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 178,
                            CountryName = "Tunisia"
                        },
                        new
                        {
                            Id = 179,
                            CountryName = "Turkey"
                        },
                        new
                        {
                            Id = 180,
                            CountryName = "Turkmenistan"
                        },
                        new
                        {
                            Id = 181,
                            CountryName = "Uganda"
                        },
                        new
                        {
                            Id = 182,
                            CountryName = "Ukraine"
                        },
                        new
                        {
                            Id = 183,
                            CountryName = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 184,
                            CountryName = "United Kingdom"
                        },
                        new
                        {
                            Id = 185,
                            CountryName = "United States"
                        },
                        new
                        {
                            Id = 186,
                            CountryName = "Uruguay"
                        },
                        new
                        {
                            Id = 187,
                            CountryName = "Uzbekistan"
                        },
                        new
                        {
                            Id = 188,
                            CountryName = "Venezuela"
                        },
                        new
                        {
                            Id = 189,
                            CountryName = "Vietnam"
                        },
                        new
                        {
                            Id = 190,
                            CountryName = "Western Sahara"
                        },
                        new
                        {
                            Id = 191,
                            CountryName = "Yemen"
                        },
                        new
                        {
                            Id = 192,
                            CountryName = "Zambia"
                        },
                        new
                        {
                            Id = 193,
                            CountryName = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.DetainedLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DetainDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FineFees")
                        .HasColumnType("smallmoney");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int");

                    b.Property<int>("ReleaseApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReleasedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LicenseId");

                    b.HasIndex("ReleaseApplicationId");

                    b.HasIndex("ReleasedByUserId");

                    b.ToTable("DetainedLicenses");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.InternationalDrivingLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IssueUsingLocalDrivingLicenseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DriverId")
                        .IsUnique();

                    b.HasIndex("IssueUsingLocalDrivingLicenseId")
                        .IsUnique();

                    b.ToTable("InternationalDrivingLicenses");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssueReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LicenseClassId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PaidFees")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DriverId")
                        .IsUnique();

                    b.HasIndex("LicenseClassId");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.LicenseClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ClassFees")
                        .HasColumnType("smallmoney");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefaultValidityLength")
                        .HasColumnType("int");

                    b.Property<byte>("MinimumAllowedAge")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("LicenseClasses");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.LocalDrivingLicenseApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("LicenseClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("LicenseClassId");

                    b.ToTable("LocalDrivingLicenseApplications");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(MAX)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityCountryId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NationalityCountryId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Ash-shatrah city",
                            BirthDate = new DateTime(2003, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mustafahaider351@gmail.com",
                            FirstName = "mustafa",
                            Gender = (byte)1,
                            LastName = "jodah",
                            NationalNo = "N100",
                            NationalityCountryId = 83,
                            Phone = "07813789596",
                            SecondName = "haider",
                            ThirdName = "hassan"
                        },
                        new
                        {
                            Id = 2,
                            Address = "alkhubar",
                            BirthDate = new DateTime(2004, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "maysamalsh-18@outlook.sa",
                            FirstName = "maysam",
                            Gender = (byte)2,
                            LastName = "abd-alrahman",
                            NationalNo = "N101",
                            NationalityCountryId = 122,
                            Phone = "0538500087",
                            SecondName = "burayk",
                            ThirdName = "ammar"
                        });
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("TestResult")
                        .HasColumnType("int");

                    b.Property<int?>("TestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("TestAppointmentId")
                        .IsUnique();

                    b.HasIndex("TestTypeId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.TestAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int>("LocalDrivingLicenseApplicationId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaidFees")
                        .HasColumnType("smallmoney");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocalDrivingLicenseApplicationId")
                        .IsUnique();

                    b.HasIndex("TestTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("TestAppointments");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.TestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TestTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestTypeFees")
                        .HasColumnType("smallmoney");

                    b.Property<string>("TestTypeTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TestTypeDescription = "This assesses the applicant's visual acuity to ensure they have sufficient vision to drive safely.",
                            TestTypeFees = 10m,
                            TestTypeTitle = "Vision Test"
                        },
                        new
                        {
                            Id = 2,
                            TestTypeDescription = "This test assesses the applicant's knowledge of traffic rules, road signs, and driving regulations. It typically consists of multiple-choice questions, and the applicant must select the correct answer(s). The written test aims to ensure that the applicant understands the rules of the road and can apply them in various driving scenarios.",
                            TestTypeFees = 20m,
                            TestTypeTitle = "Written (Theory) Test"
                        },
                        new
                        {
                            Id = 3,
                            TestTypeDescription = "This test evaluates the applicant's driving skills and ability to operate a motor vehicle safely on public roads. A licensed examiner accompanies the applicant in the vehicle and observes their driving performance.",
                            TestTypeFees = 35m,
                            TestTypeTitle = "Practical (Street) Test"
                        });
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Password = "mhhg1234",
                            PersonId = 1,
                            UserName = "alone wolf"
                        });
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.Application", b =>
                {
                    b.HasOne("DVLD.Entities.DbSets.Person", "Person")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicationPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.ApplicationType", "ApplicationType")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicationTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.User", "User")
                        .WithMany("ApplicationsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationType");

                    b.Navigation("Person");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.DetainedLicense", b =>
                {
                    b.HasOne("DVLD.Entities.DbSets.User", "CreateUser")
                        .WithMany("DetainedLicensesCreated")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.License", "License")
                        .WithMany("DetainedLicense")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.Application", "Application")
                        .WithMany("DetainedLicense")
                        .HasForeignKey("ReleaseApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.User", "ReleaseUser")
                        .WithMany("DetainedLicensesReleased")
                        .HasForeignKey("ReleasedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("CreateUser");

                    b.Navigation("License");

                    b.Navigation("ReleaseUser");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.Driver", b =>
                {
                    b.HasOne("DVLD.Entities.DbSets.User", "User")
                        .WithMany("DriversCreated")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.Person", "Person")
                        .WithOne("Driver")
                        .HasForeignKey("DVLD.Entities.DbSets.Driver", "PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.InternationalDrivingLicense", b =>
                {
                    b.HasOne("DVLD.Entities.DbSets.Application", "Application")
                        .WithOne("InternationalDrivingLicenseApplication")
                        .HasForeignKey("DVLD.Entities.DbSets.InternationalDrivingLicense", "ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.User", "User")
                        .WithMany("InternationalDLAsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.Driver", "Driver")
                        .WithOne("InternationalDrivingLicense")
                        .HasForeignKey("DVLD.Entities.DbSets.InternationalDrivingLicense", "DriverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.License", "License")
                        .WithOne("InternationalDLALicense")
                        .HasForeignKey("DVLD.Entities.DbSets.InternationalDrivingLicense", "IssueUsingLocalDrivingLicenseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Driver");

                    b.Navigation("License");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.License", b =>
                {
                    b.HasOne("DVLD.Entities.DbSets.Application", "Application")
                        .WithOne("License")
                        .HasForeignKey("DVLD.Entities.DbSets.License", "ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.User", "User")
                        .WithMany("LicensesCreated")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.Driver", "Driver")
                        .WithOne("License")
                        .HasForeignKey("DVLD.Entities.DbSets.License", "DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.LicenseClass", "LicenseClass")
                        .WithMany("Licenses")
                        .HasForeignKey("LicenseClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Driver");

                    b.Navigation("LicenseClass");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.LocalDrivingLicenseApplication", b =>
                {
                    b.HasOne("DVLD.Entities.DbSets.Application", "Application")
                        .WithOne("LocalDrivingLicenseApplication")
                        .HasForeignKey("DVLD.Entities.DbSets.LocalDrivingLicenseApplication", "ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.LicenseClass", "LicenseClass")
                        .WithMany("LocalDrivingLicenseApplications")
                        .HasForeignKey("LicenseClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("LicenseClass");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.Person", b =>
                {
                    b.HasOne("DVLD.Entities.DbSets.Country", "Country")
                        .WithMany("Person")
                        .HasForeignKey("NationalityCountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.RefreshToken", b =>
                {
                    b.HasOne("DVLD.Entities.DbSets.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.Test", b =>
                {
                    b.HasOne("DVLD.Entities.DbSets.User", "User")
                        .WithMany("TestsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.TestAppointment", "TestAppointment")
                        .WithOne("Test")
                        .HasForeignKey("DVLD.Entities.DbSets.Test", "TestAppointmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.TestType", null)
                        .WithMany("Tests")
                        .HasForeignKey("TestTypeId");

                    b.Navigation("TestAppointment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.TestAppointment", b =>
                {
                    b.HasOne("DVLD.Entities.DbSets.LocalDrivingLicenseApplication", "LocalDrivingLicenseApplication")
                        .WithOne("TestAppointment")
                        .HasForeignKey("DVLD.Entities.DbSets.TestAppointment", "LocalDrivingLicenseApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.TestType", "TestType")
                        .WithMany("TestAppointments")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DVLD.Entities.DbSets.User", "User")
                        .WithMany("TestAppointmentsCreated")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LocalDrivingLicenseApplication");

                    b.Navigation("TestType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.User", b =>
                {
                    b.HasOne("DVLD.Entities.DbSets.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("DVLD.Entities.DbSets.User", "PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.Application", b =>
                {
                    b.Navigation("DetainedLicense");

                    b.Navigation("InternationalDrivingLicenseApplication");

                    b.Navigation("License");

                    b.Navigation("LocalDrivingLicenseApplication");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.ApplicationType", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.Country", b =>
                {
                    b.Navigation("Person");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.Driver", b =>
                {
                    b.Navigation("InternationalDrivingLicense");

                    b.Navigation("License");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.License", b =>
                {
                    b.Navigation("DetainedLicense");

                    b.Navigation("InternationalDLALicense");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.LicenseClass", b =>
                {
                    b.Navigation("Licenses");

                    b.Navigation("LocalDrivingLicenseApplications");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.LocalDrivingLicenseApplication", b =>
                {
                    b.Navigation("TestAppointment");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.Person", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Driver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.TestAppointment", b =>
                {
                    b.Navigation("Test")
                        .IsRequired();
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.TestType", b =>
                {
                    b.Navigation("TestAppointments");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("DVLD.Entities.DbSets.User", b =>
                {
                    b.Navigation("ApplicationsCreated");

                    b.Navigation("DetainedLicensesCreated");

                    b.Navigation("DetainedLicensesReleased");

                    b.Navigation("DriversCreated");

                    b.Navigation("InternationalDLAsCreated");

                    b.Navigation("LicensesCreated");

                    b.Navigation("RefreshTokens");

                    b.Navigation("TestAppointmentsCreated");

                    b.Navigation("TestsCreated");
                });
#pragma warning restore 612, 618
        }
    }
}
